// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/datatransfer/v1/datasource.proto

// Protobuf Java Version: 3.25.3
package com.google.cloud.bigquery.datatransfer.v1;

public interface ImportedDataInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.bigquery.datatransfer.v1.ImportedDataInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * SQL query to run. When empty, API checks that there is only one
   * table_def specified and loads this table. Only Standard SQL queries
   * are accepted. Legacy SQL is not allowed.
   * </pre>
   *
   * <code>string sql = 1;</code>
   * @return The sql.
   */
  java.lang.String getSql();
  /**
   * <pre>
   * SQL query to run. When empty, API checks that there is only one
   * table_def specified and loads this table. Only Standard SQL queries
   * are accepted. Legacy SQL is not allowed.
   * </pre>
   *
   * <code>string sql = 1;</code>
   * @return The bytes for sql.
   */
  com.google.protobuf.ByteString
      getSqlBytes();

  /**
   * <pre>
   * Table where results should be written.
   * </pre>
   *
   * <code>string destination_table_id = 2;</code>
   * @return The destinationTableId.
   */
  java.lang.String getDestinationTableId();
  /**
   * <pre>
   * Table where results should be written.
   * </pre>
   *
   * <code>string destination_table_id = 2;</code>
   * @return The bytes for destinationTableId.
   */
  com.google.protobuf.ByteString
      getDestinationTableIdBytes();

  /**
   * <pre>
   * The description of a destination table. This can be several sentences
   * or paragraphs describing the table contents in detail.
   * </pre>
   *
   * <code>string destination_table_description = 10;</code>
   * @return The destinationTableDescription.
   */
  java.lang.String getDestinationTableDescription();
  /**
   * <pre>
   * The description of a destination table. This can be several sentences
   * or paragraphs describing the table contents in detail.
   * </pre>
   *
   * <code>string destination_table_description = 10;</code>
   * @return The bytes for destinationTableDescription.
   */
  com.google.protobuf.ByteString
      getDestinationTableDescriptionBytes();

  /**
   * <pre>
   * When used WITHOUT the "sql" parameter, describes the schema of the
   * destination table.
   * When used WITH the "sql" parameter, describes tables with data stored
   * outside of BigQuery.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.datatransfer.v1.ImportedDataInfo.TableDefinition table_defs = 3;</code>
   */
  java.util.List<com.google.cloud.bigquery.datatransfer.v1.ImportedDataInfo.TableDefinition> 
      getTableDefsList();
  /**
   * <pre>
   * When used WITHOUT the "sql" parameter, describes the schema of the
   * destination table.
   * When used WITH the "sql" parameter, describes tables with data stored
   * outside of BigQuery.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.datatransfer.v1.ImportedDataInfo.TableDefinition table_defs = 3;</code>
   */
  com.google.cloud.bigquery.datatransfer.v1.ImportedDataInfo.TableDefinition getTableDefs(int index);
  /**
   * <pre>
   * When used WITHOUT the "sql" parameter, describes the schema of the
   * destination table.
   * When used WITH the "sql" parameter, describes tables with data stored
   * outside of BigQuery.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.datatransfer.v1.ImportedDataInfo.TableDefinition table_defs = 3;</code>
   */
  int getTableDefsCount();
  /**
   * <pre>
   * When used WITHOUT the "sql" parameter, describes the schema of the
   * destination table.
   * When used WITH the "sql" parameter, describes tables with data stored
   * outside of BigQuery.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.datatransfer.v1.ImportedDataInfo.TableDefinition table_defs = 3;</code>
   */
  java.util.List<? extends com.google.cloud.bigquery.datatransfer.v1.ImportedDataInfo.TableDefinitionOrBuilder> 
      getTableDefsOrBuilderList();
  /**
   * <pre>
   * When used WITHOUT the "sql" parameter, describes the schema of the
   * destination table.
   * When used WITH the "sql" parameter, describes tables with data stored
   * outside of BigQuery.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.datatransfer.v1.ImportedDataInfo.TableDefinition table_defs = 3;</code>
   */
  com.google.cloud.bigquery.datatransfer.v1.ImportedDataInfo.TableDefinitionOrBuilder getTableDefsOrBuilder(
      int index);

  /**
   * <pre>
   * Inline code for User-defined function resources.
   * Ignored when "sql" parameter is empty.
   * </pre>
   *
   * <code>repeated string user_defined_functions = 4;</code>
   * @return A list containing the userDefinedFunctions.
   */
  java.util.List<java.lang.String>
      getUserDefinedFunctionsList();
  /**
   * <pre>
   * Inline code for User-defined function resources.
   * Ignored when "sql" parameter is empty.
   * </pre>
   *
   * <code>repeated string user_defined_functions = 4;</code>
   * @return The count of userDefinedFunctions.
   */
  int getUserDefinedFunctionsCount();
  /**
   * <pre>
   * Inline code for User-defined function resources.
   * Ignored when "sql" parameter is empty.
   * </pre>
   *
   * <code>repeated string user_defined_functions = 4;</code>
   * @param index The index of the element to return.
   * @return The userDefinedFunctions at the given index.
   */
  java.lang.String getUserDefinedFunctions(int index);
  /**
   * <pre>
   * Inline code for User-defined function resources.
   * Ignored when "sql" parameter is empty.
   * </pre>
   *
   * <code>repeated string user_defined_functions = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the userDefinedFunctions at the given index.
   */
  com.google.protobuf.ByteString
      getUserDefinedFunctionsBytes(int index);

  /**
   * <pre>
   * Specifies the action if the destination table already exists.
   * </pre>
   *
   * <code>.google.cloud.bigquery.datatransfer.v1.WriteDisposition write_disposition = 6;</code>
   * @return The enum numeric value on the wire for writeDisposition.
   */
  int getWriteDispositionValue();
  /**
   * <pre>
   * Specifies the action if the destination table already exists.
   * </pre>
   *
   * <code>.google.cloud.bigquery.datatransfer.v1.WriteDisposition write_disposition = 6;</code>
   * @return The writeDisposition.
   */
  com.google.cloud.bigquery.datatransfer.v1.WriteDisposition getWriteDisposition();
}
